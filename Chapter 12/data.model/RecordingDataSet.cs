//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DataModel {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class RecordingDataSet : DataSet {
        
        private ArtistsDataTable tableArtists;
        
        private GenresDataTable tableGenres;
        
        private LabelsDataTable tableLabels;
        
        private RecordingsDataTable tableRecordings;
        
        private ReviewsDataTable tableReviews;
        
        private ReviewersDataTable tableReviewers;
        
        private TracksDataTable tableTracks;
        
        private DataRelation relationTrackOfTheRecording;
        
        private DataRelation relationGenreOfTheTrack;
        
        private DataRelation relationArtistOfTheTrack;
        
        private DataRelation relationArtistOfTheRecording;
        
        private DataRelation relationLabelOfTheRecording;
        
        private DataRelation relationReviewerOfTheRecording;
        
        private DataRelation relationReviewsOfTheRecording;
        
        public RecordingDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected RecordingDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Artist"] != null)) {
                    this.Tables.Add(new ArtistsDataTable(ds.Tables["Artist"]));
                }
                if ((ds.Tables["Genre"] != null)) {
                    this.Tables.Add(new GenresDataTable(ds.Tables["Genre"]));
                }
                if ((ds.Tables["Label"] != null)) {
                    this.Tables.Add(new LabelsDataTable(ds.Tables["Label"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    this.Tables.Add(new RecordingsDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Review"] != null)) {
                    this.Tables.Add(new ReviewsDataTable(ds.Tables["Review"]));
                }
                if ((ds.Tables["Reviewer"] != null)) {
                    this.Tables.Add(new ReviewersDataTable(ds.Tables["Reviewer"]));
                }
                if ((ds.Tables["Track"] != null)) {
                    this.Tables.Add(new TracksDataTable(ds.Tables["Track"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ArtistsDataTable Artists {
            get {
                return this.tableArtists;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GenresDataTable Genres {
            get {
                return this.tableGenres;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabelsDataTable Labels {
            get {
                return this.tableLabels;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingsDataTable Recordings {
            get {
                return this.tableRecordings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReviewsDataTable Reviews {
            get {
                return this.tableReviews;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReviewersDataTable Reviewers {
            get {
                return this.tableReviewers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TracksDataTable Tracks {
            get {
                return this.tableTracks;
            }
        }
        
        public override DataSet Clone() {
            RecordingDataSet cln = ((RecordingDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Artist"] != null)) {
                this.Tables.Add(new ArtistsDataTable(ds.Tables["Artist"]));
            }
            if ((ds.Tables["Genre"] != null)) {
                this.Tables.Add(new GenresDataTable(ds.Tables["Genre"]));
            }
            if ((ds.Tables["Label"] != null)) {
                this.Tables.Add(new LabelsDataTable(ds.Tables["Label"]));
            }
            if ((ds.Tables["Recording"] != null)) {
                this.Tables.Add(new RecordingsDataTable(ds.Tables["Recording"]));
            }
            if ((ds.Tables["Review"] != null)) {
                this.Tables.Add(new ReviewsDataTable(ds.Tables["Review"]));
            }
            if ((ds.Tables["Reviewer"] != null)) {
                this.Tables.Add(new ReviewersDataTable(ds.Tables["Reviewer"]));
            }
            if ((ds.Tables["Track"] != null)) {
                this.Tables.Add(new TracksDataTable(ds.Tables["Track"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableArtists = ((ArtistsDataTable)(this.Tables["Artist"]));
            if ((this.tableArtists != null)) {
                this.tableArtists.InitVars();
            }
            this.tableGenres = ((GenresDataTable)(this.Tables["Genre"]));
            if ((this.tableGenres != null)) {
                this.tableGenres.InitVars();
            }
            this.tableLabels = ((LabelsDataTable)(this.Tables["Label"]));
            if ((this.tableLabels != null)) {
                this.tableLabels.InitVars();
            }
            this.tableRecordings = ((RecordingsDataTable)(this.Tables["Recording"]));
            if ((this.tableRecordings != null)) {
                this.tableRecordings.InitVars();
            }
            this.tableReviews = ((ReviewsDataTable)(this.Tables["Review"]));
            if ((this.tableReviews != null)) {
                this.tableReviews.InitVars();
            }
            this.tableReviewers = ((ReviewersDataTable)(this.Tables["Reviewer"]));
            if ((this.tableReviewers != null)) {
                this.tableReviewers.InitVars();
            }
            this.tableTracks = ((TracksDataTable)(this.Tables["Track"]));
            if ((this.tableTracks != null)) {
                this.tableTracks.InitVars();
            }
            this.relationTrackOfTheRecording = this.Relations["TrackOfTheRecording"];
            this.relationGenreOfTheTrack = this.Relations["GenreOfTheTrack"];
            this.relationArtistOfTheTrack = this.Relations["ArtistOfTheTrack"];
            this.relationArtistOfTheRecording = this.Relations["ArtistOfTheRecording"];
            this.relationLabelOfTheRecording = this.Relations["LabelOfTheRecording"];
            this.relationReviewerOfTheRecording = this.Relations["ReviewerOfTheRecording"];
            this.relationReviewsOfTheRecording = this.Relations["ReviewsOfTheRecording"];
        }
        
        private void InitClass() {
            this.DataSetName = "RecordingDataSet";
            this.Prefix = "";
            this.Namespace = "http://nunit.org/book/RecordingDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableArtists = new ArtistsDataTable();
            this.Tables.Add(this.tableArtists);
            this.tableGenres = new GenresDataTable();
            this.Tables.Add(this.tableGenres);
            this.tableLabels = new LabelsDataTable();
            this.Tables.Add(this.tableLabels);
            this.tableRecordings = new RecordingsDataTable();
            this.Tables.Add(this.tableRecordings);
            this.tableReviews = new ReviewsDataTable();
            this.Tables.Add(this.tableReviews);
            this.tableReviewers = new ReviewersDataTable();
            this.Tables.Add(this.tableReviewers);
            this.tableTracks = new TracksDataTable();
            this.Tables.Add(this.tableTracks);
            this.relationTrackOfTheRecording = new DataRelation("TrackOfTheRecording", new DataColumn[] {
                        this.tableRecordings.IdColumn}, new DataColumn[] {
                        this.tableTracks.RecordingIdColumn}, false);
            this.Relations.Add(this.relationTrackOfTheRecording);
            this.relationGenreOfTheTrack = new DataRelation("GenreOfTheTrack", new DataColumn[] {
                        this.tableGenres.IdColumn}, new DataColumn[] {
                        this.tableTracks.GenreIdColumn}, false);
            this.Relations.Add(this.relationGenreOfTheTrack);
            this.relationArtistOfTheTrack = new DataRelation("ArtistOfTheTrack", new DataColumn[] {
                        this.tableArtists.IdColumn}, new DataColumn[] {
                        this.tableTracks.ArtistIdColumn}, false);
            this.Relations.Add(this.relationArtistOfTheTrack);
            this.relationArtistOfTheRecording = new DataRelation("ArtistOfTheRecording", new DataColumn[] {
                        this.tableArtists.IdColumn}, new DataColumn[] {
                        this.tableRecordings.ArtistIdColumn}, false);
            this.Relations.Add(this.relationArtistOfTheRecording);
            this.relationLabelOfTheRecording = new DataRelation("LabelOfTheRecording", new DataColumn[] {
                        this.tableLabels.IdColumn}, new DataColumn[] {
                        this.tableRecordings.LabelIdColumn}, false);
            this.Relations.Add(this.relationLabelOfTheRecording);
            this.relationReviewerOfTheRecording = new DataRelation("ReviewerOfTheRecording", new DataColumn[] {
                        this.tableReviewers.IdColumn}, new DataColumn[] {
                        this.tableReviews.ReviewerIdColumn}, false);
            this.Relations.Add(this.relationReviewerOfTheRecording);
            this.relationReviewsOfTheRecording = new DataRelation("ReviewsOfTheRecording", new DataColumn[] {
                        this.tableRecordings.IdColumn}, new DataColumn[] {
                        this.tableReviews.RecordingIdColumn}, false);
            this.Relations.Add(this.relationReviewsOfTheRecording);
        }
        
        private bool ShouldSerializeArtists() {
            return false;
        }
        
        private bool ShouldSerializeGenres() {
            return false;
        }
        
        private bool ShouldSerializeLabels() {
            return false;
        }
        
        private bool ShouldSerializeRecordings() {
            return false;
        }
        
        private bool ShouldSerializeReviews() {
            return false;
        }
        
        private bool ShouldSerializeReviewers() {
            return false;
        }
        
        private bool ShouldSerializeTracks() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ArtistChangeEventHandler(object sender, ArtistChangeEvent e);
        
        public delegate void GenreChangeEventHandler(object sender, GenreChangeEvent e);
        
        public delegate void LabelChangeEventHandler(object sender, LabelChangeEvent e);
        
        public delegate void RecordingChangeEventHandler(object sender, RecordingChangeEvent e);
        
        public delegate void ReviewChangeEventHandler(object sender, ReviewChangeEvent e);
        
        public delegate void ReviewerChangeEventHandler(object sender, ReviewerChangeEvent e);
        
        public delegate void TrackChangeEventHandler(object sender, TrackChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ArtistsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            internal ArtistsDataTable() : 
                    base("Artist") {
                this.InitClass();
            }
            
            internal ArtistsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public Artist this[int index] {
                get {
                    return ((Artist)(this.Rows[index]));
                }
            }
            
            public event ArtistChangeEventHandler ArtistChanged;
            
            public event ArtistChangeEventHandler ArtistChanging;
            
            public event ArtistChangeEventHandler ArtistDeleted;
            
            public event ArtistChangeEventHandler ArtistDeleting;
            
            public void AddArtist(Artist row) {
                this.Rows.Add(row);
            }
            
            public Artist AddArtist(long Id, string Name) {
                Artist rowArtist = ((Artist)(this.NewRow()));
                rowArtist.ItemArray = new object[] {
                        Id,
                        Name};
                this.Rows.Add(rowArtist);
                return rowArtist;
            }
            
            public Artist FindById(long Id) {
                return ((Artist)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ArtistsDataTable cln = ((ArtistsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ArtistsDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["id"];
                this.columnName = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnName = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("ArtistPK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            public Artist NewArtist() {
                return ((Artist)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Artist(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Artist);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArtistChanged != null)) {
                    this.ArtistChanged(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArtistChanging != null)) {
                    this.ArtistChanging(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArtistDeleted != null)) {
                    this.ArtistDeleted(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArtistDeleting != null)) {
                    this.ArtistDeleting(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            public void RemoveArtist(Artist row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Artist : DataRow {
            
            private ArtistsDataTable tableArtists;
            
            internal Artist(DataRowBuilder rb) : 
                    base(rb) {
                this.tableArtists = ((ArtistsDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableArtists.IdColumn]));
                }
                set {
                    this[this.tableArtists.IdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableArtists.NameColumn]));
                }
                set {
                    this[this.tableArtists.NameColumn] = value;
                }
            }
            
            public Track[] GetTracks() {
                return ((Track[])(this.GetChildRows(this.Table.ChildRelations["ArtistOfTheTrack"])));
            }
            
            public Recording[] GetRecordings() {
                return ((Recording[])(this.GetChildRows(this.Table.ChildRelations["ArtistOfTheRecording"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ArtistChangeEvent : EventArgs {
            
            private Artist eventRow;
            
            private DataRowAction eventAction;
            
            public ArtistChangeEvent(Artist row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Artist Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GenresDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            internal GenresDataTable() : 
                    base("Genre") {
                this.InitClass();
            }
            
            internal GenresDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public Genre this[int index] {
                get {
                    return ((Genre)(this.Rows[index]));
                }
            }
            
            public event GenreChangeEventHandler GenreChanged;
            
            public event GenreChangeEventHandler GenreChanging;
            
            public event GenreChangeEventHandler GenreDeleted;
            
            public event GenreChangeEventHandler GenreDeleting;
            
            public void AddGenre(Genre row) {
                this.Rows.Add(row);
            }
            
            public Genre AddGenre(long Id, string Name) {
                Genre rowGenre = ((Genre)(this.NewRow()));
                rowGenre.ItemArray = new object[] {
                        Id,
                        Name};
                this.Rows.Add(rowGenre);
                return rowGenre;
            }
            
            public Genre FindById(long Id) {
                return ((Genre)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GenresDataTable cln = ((GenresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GenresDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["id"];
                this.columnName = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnName = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("GenrePK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            public Genre NewGenre() {
                return ((Genre)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Genre(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Genre);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GenreChanged != null)) {
                    this.GenreChanged(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GenreChanging != null)) {
                    this.GenreChanging(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GenreDeleted != null)) {
                    this.GenreDeleted(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GenreDeleting != null)) {
                    this.GenreDeleting(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGenre(Genre row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Genre : DataRow {
            
            private GenresDataTable tableGenres;
            
            internal Genre(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGenres = ((GenresDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableGenres.IdColumn]));
                }
                set {
                    this[this.tableGenres.IdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableGenres.NameColumn]));
                }
                set {
                    this[this.tableGenres.NameColumn] = value;
                }
            }
            
            public Track[] GetTracks() {
                return ((Track[])(this.GetChildRows(this.Table.ChildRelations["GenreOfTheTrack"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GenreChangeEvent : EventArgs {
            
            private Genre eventRow;
            
            private DataRowAction eventAction;
            
            public GenreChangeEvent(Genre row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Genre Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LabelsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            internal LabelsDataTable() : 
                    base("Label") {
                this.InitClass();
            }
            
            internal LabelsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public Label this[int index] {
                get {
                    return ((Label)(this.Rows[index]));
                }
            }
            
            public event LabelChangeEventHandler LabelChanged;
            
            public event LabelChangeEventHandler LabelChanging;
            
            public event LabelChangeEventHandler LabelDeleted;
            
            public event LabelChangeEventHandler LabelDeleting;
            
            public void AddLabel(Label row) {
                this.Rows.Add(row);
            }
            
            public Label AddLabel(long Id, string Name) {
                Label rowLabel = ((Label)(this.NewRow()));
                rowLabel.ItemArray = new object[] {
                        Id,
                        Name};
                this.Rows.Add(rowLabel);
                return rowLabel;
            }
            
            public Label FindById(long Id) {
                return ((Label)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LabelsDataTable cln = ((LabelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LabelsDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["id"];
                this.columnName = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnName = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("LabelPK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            public Label NewLabel() {
                return ((Label)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Label(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Label);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabelChanged != null)) {
                    this.LabelChanged(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabelChanging != null)) {
                    this.LabelChanging(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabelDeleted != null)) {
                    this.LabelDeleted(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabelDeleting != null)) {
                    this.LabelDeleting(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLabel(Label row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Label : DataRow {
            
            private LabelsDataTable tableLabels;
            
            internal Label(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabels = ((LabelsDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableLabels.IdColumn]));
                }
                set {
                    this[this.tableLabels.IdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableLabels.NameColumn]));
                }
                set {
                    this[this.tableLabels.NameColumn] = value;
                }
            }
            
            public Recording[] GetRecordings() {
                return ((Recording[])(this.GetChildRows(this.Table.ChildRelations["LabelOfTheRecording"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LabelChangeEvent : EventArgs {
            
            private Label eventRow;
            
            private DataRowAction eventAction;
            
            public LabelChangeEvent(Label row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Label Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnTitle;
            
            private DataColumn columnReleaseDate;
            
            private DataColumn columnLabelId;
            
            private DataColumn columnArtistId;
            
            internal RecordingsDataTable() : 
                    base("Recording") {
                this.InitClass();
            }
            
            internal RecordingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal DataColumn ReleaseDateColumn {
                get {
                    return this.columnReleaseDate;
                }
            }
            
            internal DataColumn LabelIdColumn {
                get {
                    return this.columnLabelId;
                }
            }
            
            internal DataColumn ArtistIdColumn {
                get {
                    return this.columnArtistId;
                }
            }
            
            public Recording this[int index] {
                get {
                    return ((Recording)(this.Rows[index]));
                }
            }
            
            public event RecordingChangeEventHandler RecordingChanged;
            
            public event RecordingChangeEventHandler RecordingChanging;
            
            public event RecordingChangeEventHandler RecordingDeleted;
            
            public event RecordingChangeEventHandler RecordingDeleting;
            
            public void AddRecording(Recording row) {
                this.Rows.Add(row);
            }
            
            public Recording AddRecording(long Id, string Title, System.DateTime ReleaseDate, Label parentLabelByLabelOfTheRecording, Artist parentArtistByArtistOfTheRecording) {
                Recording rowRecording = ((Recording)(this.NewRow()));
                rowRecording.ItemArray = new object[] {
                        Id,
                        Title,
                        ReleaseDate,
                        parentLabelByLabelOfTheRecording[0],
                        parentArtistByArtistOfTheRecording[0]};
                this.Rows.Add(rowRecording);
                return rowRecording;
            }
            
            public Recording FindById(long Id) {
                return ((Recording)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RecordingsDataTable cln = ((RecordingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RecordingsDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["id"];
                this.columnTitle = this.Columns["title"];
                this.columnReleaseDate = this.Columns["releasedate"];
                this.columnLabelId = this.Columns["labelid"];
                this.columnArtistId = this.Columns["artistid"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnTitle = new DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnReleaseDate = new DataColumn("releasedate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReleaseDate);
                this.columnLabelId = new DataColumn("labelid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelId);
                this.columnArtistId = new DataColumn("artistid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArtistId);
                this.Constraints.Add(new UniqueConstraint("RecordingPK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnTitle.AllowDBNull = false;
                this.columnReleaseDate.AllowDBNull = false;
                this.columnLabelId.AllowDBNull = false;
                this.columnArtistId.AllowDBNull = false;
            }
            
            public Recording NewRecording() {
                return ((Recording)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Recording(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Recording);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingChanged != null)) {
                    this.RecordingChanged(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingChanging != null)) {
                    this.RecordingChanging(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingDeleted != null)) {
                    this.RecordingDeleted(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingDeleting != null)) {
                    this.RecordingDeleting(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRecording(Recording row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Recording : DataRow {
            
            private RecordingsDataTable tableRecordings;
            
            internal Recording(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings = ((RecordingsDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableRecordings.IdColumn]));
                }
                set {
                    this[this.tableRecordings.IdColumn] = value;
                }
            }
            
            public string Title {
                get {
                    return ((string)(this[this.tableRecordings.TitleColumn]));
                }
                set {
                    this[this.tableRecordings.TitleColumn] = value;
                }
            }
            
            public System.DateTime ReleaseDate {
                get {
                    return ((System.DateTime)(this[this.tableRecordings.ReleaseDateColumn]));
                }
                set {
                    this[this.tableRecordings.ReleaseDateColumn] = value;
                }
            }
            
            public long LabelId {
                get {
                    return ((long)(this[this.tableRecordings.LabelIdColumn]));
                }
                set {
                    this[this.tableRecordings.LabelIdColumn] = value;
                }
            }
            
            public long ArtistId {
                get {
                    return ((long)(this[this.tableRecordings.ArtistIdColumn]));
                }
                set {
                    this[this.tableRecordings.ArtistIdColumn] = value;
                }
            }
            
            public Artist Artist {
                get {
                    return ((Artist)(this.GetParentRow(this.Table.ParentRelations["ArtistOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArtistOfTheRecording"]);
                }
            }
            
            public Label Label {
                get {
                    return ((Label)(this.GetParentRow(this.Table.ParentRelations["LabelOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LabelOfTheRecording"]);
                }
            }
            
            public Track[] GetTracks() {
                return ((Track[])(this.GetChildRows(this.Table.ChildRelations["TrackOfTheRecording"])));
            }
            
            public Review[] GetReviews() {
                return ((Review[])(this.GetChildRows(this.Table.ChildRelations["ReviewsOfTheRecording"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingChangeEvent : EventArgs {
            
            private Recording eventRow;
            
            private DataRowAction eventAction;
            
            public RecordingChangeEvent(Recording row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Recording Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReviewsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnReviewerId;
            
            private DataColumn columnRecordingId;
            
            private DataColumn columnRating;
            
            private DataColumn columnContent;
            
            internal ReviewsDataTable() : 
                    base("Review") {
                this.InitClass();
            }
            
            internal ReviewsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn ReviewerIdColumn {
                get {
                    return this.columnReviewerId;
                }
            }
            
            internal DataColumn RecordingIdColumn {
                get {
                    return this.columnRecordingId;
                }
            }
            
            internal DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            internal DataColumn ContentColumn {
                get {
                    return this.columnContent;
                }
            }
            
            public Review this[int index] {
                get {
                    return ((Review)(this.Rows[index]));
                }
            }
            
            public event ReviewChangeEventHandler ReviewChanged;
            
            public event ReviewChangeEventHandler ReviewChanging;
            
            public event ReviewChangeEventHandler ReviewDeleted;
            
            public event ReviewChangeEventHandler ReviewDeleting;
            
            public void AddReview(Review row) {
                this.Rows.Add(row);
            }
            
            public Review AddReview(long Id, Reviewer parentReviewerByReviewerOfTheRecording, Recording parentRecordingByReviewsOfTheRecording, int Rating, string Content) {
                Review rowReview = ((Review)(this.NewRow()));
                rowReview.ItemArray = new object[] {
                        Id,
                        parentReviewerByReviewerOfTheRecording[0],
                        parentRecordingByReviewsOfTheRecording[0],
                        Rating,
                        Content};
                this.Rows.Add(rowReview);
                return rowReview;
            }
            
            public Review FindById(long Id) {
                return ((Review)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ReviewsDataTable cln = ((ReviewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ReviewsDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["id"];
                this.columnReviewerId = this.Columns["reviewerid"];
                this.columnRecordingId = this.Columns["recordingid"];
                this.columnRating = this.Columns["rating"];
                this.columnContent = this.Columns["review"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnReviewerId = new DataColumn("reviewerid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReviewerId);
                this.columnRecordingId = new DataColumn("recordingid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordingId);
                this.columnRating = new DataColumn("rating", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating);
                this.columnContent = new DataColumn("review", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContent);
                this.Constraints.Add(new UniqueConstraint("ReviewPK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnRating.AllowDBNull = false;
            }
            
            public Review NewReview() {
                return ((Review)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Review(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Review);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReviewChanged != null)) {
                    this.ReviewChanged(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReviewChanging != null)) {
                    this.ReviewChanging(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReviewDeleted != null)) {
                    this.ReviewDeleted(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReviewDeleting != null)) {
                    this.ReviewDeleting(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            public void RemoveReview(Review row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Review : DataRow {
            
            private ReviewsDataTable tableReviews;
            
            internal Review(DataRowBuilder rb) : 
                    base(rb) {
                this.tableReviews = ((ReviewsDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableReviews.IdColumn]));
                }
                set {
                    this[this.tableReviews.IdColumn] = value;
                }
            }
            
            public long ReviewerId {
                get {
                    try {
                        return ((long)(this[this.tableReviews.ReviewerIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReviews.ReviewerIdColumn] = value;
                }
            }
            
            public long RecordingId {
                get {
                    try {
                        return ((long)(this[this.tableReviews.RecordingIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReviews.RecordingIdColumn] = value;
                }
            }
            
            public int Rating {
                get {
                    return ((int)(this[this.tableReviews.RatingColumn]));
                }
                set {
                    this[this.tableReviews.RatingColumn] = value;
                }
            }
            
            public string Content {
                get {
                    try {
                        return ((string)(this[this.tableReviews.ContentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReviews.ContentColumn] = value;
                }
            }
            
            public Reviewer Reviewer {
                get {
                    return ((Reviewer)(this.GetParentRow(this.Table.ParentRelations["ReviewerOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReviewerOfTheRecording"]);
                }
            }
            
            public Recording Recording {
                get {
                    return ((Recording)(this.GetParentRow(this.Table.ParentRelations["ReviewsOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReviewsOfTheRecording"]);
                }
            }
            
            public bool IsReviewerIdNull() {
                return this.IsNull(this.tableReviews.ReviewerIdColumn);
            }
            
            public void SetReviewerIdNull() {
                this[this.tableReviews.ReviewerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordingIdNull() {
                return this.IsNull(this.tableReviews.RecordingIdColumn);
            }
            
            public void SetRecordingIdNull() {
                this[this.tableReviews.RecordingIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsContentNull() {
                return this.IsNull(this.tableReviews.ContentColumn);
            }
            
            public void SetContentNull() {
                this[this.tableReviews.ContentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReviewChangeEvent : EventArgs {
            
            private Review eventRow;
            
            private DataRowAction eventAction;
            
            public ReviewChangeEvent(Review row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Review Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReviewersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            internal ReviewersDataTable() : 
                    base("Reviewer") {
                this.InitClass();
            }
            
            internal ReviewersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public Reviewer this[int index] {
                get {
                    return ((Reviewer)(this.Rows[index]));
                }
            }
            
            public event ReviewerChangeEventHandler ReviewerChanged;
            
            public event ReviewerChangeEventHandler ReviewerChanging;
            
            public event ReviewerChangeEventHandler ReviewerDeleted;
            
            public event ReviewerChangeEventHandler ReviewerDeleting;
            
            public void AddReviewer(Reviewer row) {
                this.Rows.Add(row);
            }
            
            public Reviewer AddReviewer(long Id, string Name) {
                Reviewer rowReviewer = ((Reviewer)(this.NewRow()));
                rowReviewer.ItemArray = new object[] {
                        Id,
                        Name};
                this.Rows.Add(rowReviewer);
                return rowReviewer;
            }
            
            public Reviewer FindById(long Id) {
                return ((Reviewer)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ReviewersDataTable cln = ((ReviewersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ReviewersDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["id"];
                this.columnName = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnName = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("ReviewerPK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            public Reviewer NewReviewer() {
                return ((Reviewer)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Reviewer(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Reviewer);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReviewerChanged != null)) {
                    this.ReviewerChanged(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReviewerChanging != null)) {
                    this.ReviewerChanging(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReviewerDeleted != null)) {
                    this.ReviewerDeleted(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReviewerDeleting != null)) {
                    this.ReviewerDeleting(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            public void RemoveReviewer(Reviewer row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Reviewer : DataRow {
            
            private ReviewersDataTable tableReviewers;
            
            internal Reviewer(DataRowBuilder rb) : 
                    base(rb) {
                this.tableReviewers = ((ReviewersDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableReviewers.IdColumn]));
                }
                set {
                    this[this.tableReviewers.IdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableReviewers.NameColumn]));
                }
                set {
                    this[this.tableReviewers.NameColumn] = value;
                }
            }
            
            public Review[] GetReviews() {
                return ((Review[])(this.GetChildRows(this.Table.ChildRelations["ReviewerOfTheRecording"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReviewerChangeEvent : EventArgs {
            
            private Reviewer eventRow;
            
            private DataRowAction eventAction;
            
            public ReviewerChangeEvent(Reviewer row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Reviewer Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TracksDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnTitle;
            
            private DataColumn columnDuration;
            
            private DataColumn columnGenreId;
            
            private DataColumn columnArtistId;
            
            private DataColumn columnRecordingId;
            
            internal TracksDataTable() : 
                    base("Track") {
                this.InitClass();
            }
            
            internal TracksDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            internal DataColumn GenreIdColumn {
                get {
                    return this.columnGenreId;
                }
            }
            
            internal DataColumn ArtistIdColumn {
                get {
                    return this.columnArtistId;
                }
            }
            
            internal DataColumn RecordingIdColumn {
                get {
                    return this.columnRecordingId;
                }
            }
            
            public Track this[int index] {
                get {
                    return ((Track)(this.Rows[index]));
                }
            }
            
            public event TrackChangeEventHandler TrackChanged;
            
            public event TrackChangeEventHandler TrackChanging;
            
            public event TrackChangeEventHandler TrackDeleted;
            
            public event TrackChangeEventHandler TrackDeleting;
            
            public void AddTrack(Track row) {
                this.Rows.Add(row);
            }
            
            public Track AddTrack(long Id, string Title, int Duration, Genre parentGenreByGenreOfTheTrack, Artist parentArtistByArtistOfTheTrack, Recording parentRecordingByTrackOfTheRecording) {
                Track rowTrack = ((Track)(this.NewRow()));
                rowTrack.ItemArray = new object[] {
                        Id,
                        Title,
                        Duration,
                        parentGenreByGenreOfTheTrack[0],
                        parentArtistByArtistOfTheTrack[0],
                        parentRecordingByTrackOfTheRecording[0]};
                this.Rows.Add(rowTrack);
                return rowTrack;
            }
            
            public Track FindById(long Id) {
                return ((Track)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TracksDataTable cln = ((TracksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TracksDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["id"];
                this.columnTitle = this.Columns["title"];
                this.columnDuration = this.Columns["duration"];
                this.columnGenreId = this.Columns["genreid"];
                this.columnArtistId = this.Columns["artistid"];
                this.columnRecordingId = this.Columns["recordingid"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnTitle = new DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnDuration = new DataColumn("duration", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDuration);
                this.columnGenreId = new DataColumn("genreid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGenreId);
                this.columnArtistId = new DataColumn("artistid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArtistId);
                this.columnRecordingId = new DataColumn("recordingid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordingId);
                this.Constraints.Add(new UniqueConstraint("TrackPK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnTitle.AllowDBNull = false;
                this.columnDuration.AllowDBNull = false;
            }
            
            public Track NewTrack() {
                return ((Track)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Track(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Track);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrackChanged != null)) {
                    this.TrackChanged(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrackChanging != null)) {
                    this.TrackChanging(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrackDeleted != null)) {
                    this.TrackDeleted(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrackDeleting != null)) {
                    this.TrackDeleting(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTrack(Track row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Track : DataRow {
            
            private TracksDataTable tableTracks;
            
            internal Track(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTracks = ((TracksDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableTracks.IdColumn]));
                }
                set {
                    this[this.tableTracks.IdColumn] = value;
                }
            }
            
            public string Title {
                get {
                    return ((string)(this[this.tableTracks.TitleColumn]));
                }
                set {
                    this[this.tableTracks.TitleColumn] = value;
                }
            }
            
            public int Duration {
                get {
                    return ((int)(this[this.tableTracks.DurationColumn]));
                }
                set {
                    this[this.tableTracks.DurationColumn] = value;
                }
            }
            
            public long GenreId {
                get {
                    try {
                        return ((long)(this[this.tableTracks.GenreIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTracks.GenreIdColumn] = value;
                }
            }
            
            public long ArtistId {
                get {
                    try {
                        return ((long)(this[this.tableTracks.ArtistIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTracks.ArtistIdColumn] = value;
                }
            }
            
            public long RecordingId {
                get {
                    try {
                        return ((long)(this[this.tableTracks.RecordingIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTracks.RecordingIdColumn] = value;
                }
            }
            
            public Recording Recording {
                get {
                    return ((Recording)(this.GetParentRow(this.Table.ParentRelations["TrackOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrackOfTheRecording"]);
                }
            }
            
            public Genre Genre {
                get {
                    return ((Genre)(this.GetParentRow(this.Table.ParentRelations["GenreOfTheTrack"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GenreOfTheTrack"]);
                }
            }
            
            public Artist Artist {
                get {
                    return ((Artist)(this.GetParentRow(this.Table.ParentRelations["ArtistOfTheTrack"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArtistOfTheTrack"]);
                }
            }
            
            public bool IsGenreIdNull() {
                return this.IsNull(this.tableTracks.GenreIdColumn);
            }
            
            public void SetGenreIdNull() {
                this[this.tableTracks.GenreIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsArtistIdNull() {
                return this.IsNull(this.tableTracks.ArtistIdColumn);
            }
            
            public void SetArtistIdNull() {
                this[this.tableTracks.ArtistIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordingIdNull() {
                return this.IsNull(this.tableTracks.RecordingIdColumn);
            }
            
            public void SetRecordingIdNull() {
                this[this.tableTracks.RecordingIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TrackChangeEvent : EventArgs {
            
            private Track eventRow;
            
            private DataRowAction eventAction;
            
            public TrackChangeEvent(Track row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Track Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
